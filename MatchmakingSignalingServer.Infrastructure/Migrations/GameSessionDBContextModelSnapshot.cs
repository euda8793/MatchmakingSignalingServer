// <auto-generated />
using System;
using MatchmakingSignalingServer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchmakingSignalingServer.Infrastructure.Migrations
{
    [DbContext(typeof(GameSessionDBContext))]
    partial class GameSessionDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("MatchmakingSignalingServer.Domain.GameSessionEntities.GameSession", b =>
                {
                    b.Property<int>("GameSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameSessionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GameSessionId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("MatchmakingSignalingServer.Domain.GameSessionEntities.PlayerClient", b =>
                {
                    b.Property<int>("PlayerClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectionState")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerClientId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("PlayerClients");
                });

            modelBuilder.Entity("MatchmakingSignalingServer.Domain.GameSessionEntities.SignalingStep", b =>
                {
                    b.Property<int>("SignalingStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InformationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SignalingStepId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("SignalingSteps");
                });

            modelBuilder.Entity("MatchmakingSignalingServer.Domain.GameSessionEntities.PlayerClient", b =>
                {
                    b.HasOne("MatchmakingSignalingServer.Domain.GameSessionEntities.GameSession", "GameSession")
                        .WithMany("Clients")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("MatchmakingSignalingServer.Domain.GameSessionEntities.SignalingStep", b =>
                {
                    b.HasOne("MatchmakingSignalingServer.Domain.GameSessionEntities.GameSession", "GameSession")
                        .WithMany("Steps")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MatchmakingSignalingServer.Domain.GameSessionEntities.ValueTypes.IceCandidate", "IceCandidate", b1 =>
                        {
                            b1.Property<int>("SignalingStepId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Index")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Media")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("SignalingStepId");

                            b1.ToTable("SignalingSteps");

                            b1.WithOwner()
                                .HasForeignKey("SignalingStepId");
                        });

                    b.OwnsOne("MatchmakingSignalingServer.Domain.GameSessionEntities.ValueTypes.SessionDescription", "SessionDescription", b1 =>
                        {
                            b1.Property<int>("SignalingStepId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Sdp")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("SessionType")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("SignalingStepId");

                            b1.ToTable("SignalingSteps");

                            b1.WithOwner()
                                .HasForeignKey("SignalingStepId");
                        });

                    b.Navigation("GameSession");

                    b.Navigation("IceCandidate");

                    b.Navigation("SessionDescription");
                });

            modelBuilder.Entity("MatchmakingSignalingServer.Domain.GameSessionEntities.GameSession", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
